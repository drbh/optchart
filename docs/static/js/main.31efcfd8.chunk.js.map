{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["round","number","precision","factor","Math","pow","tempNumber","DemoDualAxes","props","x1","y1","x2","y2","x3","y3","x4","y4","balance","currentPrice","strike","costOfOption","equityLine","numberOfShares","floor","costOfStockPosition","optionBreakeven","numberOfContracts","costOfOptionPosition","coords","px","py","minPrice","maxPrice","price","value","usedPrice","push","toFixed","key","mmax","maxx","mmin","minx","console","log","config","data","height","xField","yField","seriesField","annotations","type","start","end","style","stroke","lineDash","className","onBack","title","subTitle","size","column","Item","label","layout","labelCol","span","wrapperCol","App","onFinish","values","bl","cp","optPrice","op","strikePrice","st","forceUpdate","gutter","name","this","prefix","suffix","offset","htmlType","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAcMA,G,OAAQ,SAASC,EAAQC,GAC3B,IAAIC,EAASC,KAAKC,IAAI,GAAIH,GACtBI,EAAaL,EAASE,EAE1B,OADwBC,KAAKJ,MAAMM,GACRH,IA6JhBI,EA1JgB,SAACC,GAgC9B,IA9BA,IAjBwBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAiB9CC,EAAUT,EAAMS,QAEhBC,EAAeV,EAAMU,aACvBC,EAASX,EAAMW,OACfC,EAAeZ,EAAMY,aACrBC,EAAa,GACbC,EAAiBlB,KAAKmB,MAAMN,EAAQC,GACpCM,EAAsBN,EAAeI,EAErCG,EAAmBN,EAASC,EAE5BM,EAAoBtB,KAAKmB,MAAMN,GAAsB,IAAbG,IACxCO,EAAuBP,GAAoC,IAApBM,GAIvCE,EA5BG,CAACC,MALgBpB,EAmCtBgB,IAnCkCb,EAmCmC,IAAlBc,GAAtB,IAAID,KAnCPf,EAmCT,IAnCaC,EAmCR,QAnCgBE,EAoCtCK,IApC8CH,EAoC3B,OAnCcN,EAAGE,IAAKE,GADSG,EAoCzB,IAAMM,EAAgBE,IApCLV,EAoC5B,GAnCoCC,MAASN,EAAGE,IAAKG,EAAGE,IAAON,EAAGE,IAAKC,EAAGE,IAI9Ee,KAHDrB,EAAGG,EAAGF,EAAGC,IAAKG,EAAGE,IAAON,EAAGE,IAAKC,EAAGG,EAAGF,EAAGC,MAASN,EAAGE,IAAKG,EAAGE,IAAON,EAAGE,IAAKC,EAAGE,KAuCpFgB,EAAwB,GAAZH,EAAOC,GACnBG,EAAwB,IAAZJ,EAAOC,GAKhBI,EAAkB,IAATF,EAAeE,GAAmB,IAATD,EAAeC,IAAS,CAIjEC,EAAQlC,GADJkC,GADAC,EAAYF,EAAQ,KACAX,GACFE,EAAqB,GAI3CH,EAAWe,KAAK,CAACF,MAAOA,EAAOD,MAAOE,EAAUE,QAAQ,GAAIC,IAAK,YAOnE,IAASL,EAAkB,IAATF,EAAeE,GAAmB,IAATD,EAAeC,IAAS,CAEjE,IAAIE,EAGAD,EAAgD,IAAlBR,IAH9BS,EAAYF,EAAQ,KAGDd,GAEnBgB,EAAYV,IACdS,EAAQ,GAIVA,EAAQlC,EAAMkC,EAAQP,EAAsB,GAG5CN,EAAWe,KAAK,CAACF,MAAOA,EAAOD,MAAOE,EAAUE,QAAQ,GAAIC,IAAK,YAGnE,IAAIC,EAAO/B,EAAMgC,KACbC,EAAOjC,EAAMkC,KAEnBC,QAAQC,IAAIL,EAAME,GAGhB,IAAII,EAAS,CACXC,KAAMzB,EACN0B,OAAQ,IACRC,OAAQ,QACRC,OAAQ,QAMRC,YAAa,MAEbC,YAAa,CAcX,CACEC,KAAM,OAENC,MAAO,CAAC,MAAO,GACfC,IAAK,CAAC,MAAO,GAEbC,MAAO,CACLC,OAAQ,UACRC,SAAW,CAAE,EAAI,KAGrB,CACEL,KAAM,OAENC,MAAO,CAAC,MAAOzB,EAAOE,IACtBwB,IAAK,CAAC,MAAO1B,EAAOE,IAEpByB,MAAO,CACLC,OAAQ,UACRC,SAAW,CAAE,EAAI,OAMzB,OAAO,qCAEL,cAAC,IAAD,CACEC,UAAU,8BACVC,OACE,aAEFC,MAAM,QACNC,SAAS,qBANX,SASA,eAAC,IAAD,CAAcC,KAAK,QAAQC,OAAQ,EAAnC,UACA,cAAC,IAAaC,KAAd,CAAmBC,MAAM,gBAAzB,SAA0C/C,IAC1C,cAAC,IAAa8C,KAAd,CAAmBC,MAAM,eAAzB,SAAyC9C,IACzC,cAAC,IAAa6C,KAAd,CAAmBC,MAAM,cAAzB,SAAwCzC,IACxC,cAAC,IAAawC,KAAd,CAAmBC,MAAM,cAAzB,SAAwCtC,IACxC,cAAC,IAAaqC,KAAd,CAAmBC,MAAM,mBAAzB,SAA6CxC,IAC7C,cAAC,IAAauC,KAAd,CAAmBC,MAAM,eAAzB,SAAyC7C,IACzC,cAAC,IAAa4C,KAAd,CAAmBC,MAAM,sBAAzB,SAAgDvC,IAChD,cAAC,IAAasC,KAAd,CAAmBC,MAAM,mBAAzB,SAA6C3C,IAC7C,cAAC,IAAa0C,KAAd,CAAmBC,MAAM,iBAAzB,SAA2CjE,EAAyB,IAAlB0B,EAAuBJ,EAAe,KACxF,cAAC,IAAa0C,KAAd,CAAmBC,MAAM,6BAAzB,SAAuDjE,EAAM4B,EAAOC,GAAI,KACxE,cAAC,IAAamC,KAAd,CAAmBC,MAAM,cAAzB,SAAwCjE,EAAM4B,EAAOE,GAAI,KACzD,cAAC,IAAakC,KAAd,CAAmBC,MAAM,oBAAzB,SAA8CjE,EAAOA,EAAM4B,EAAOC,GAAI,GAAGX,EAAc,EAAE,UAMzF,cAAC,IAAD,eAAU2B,Q,sDCrKRqB,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KA6FPE,EA/Ef,kDACE,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IAOR+D,SAAW,SAACC,GACV,EAAKvD,QAAUuD,EAAOC,GACtB,EAAKvD,aAAesD,EAAOE,GAC3B,EAAKC,SAAWH,EAAOI,GACvB,EAAKC,YAAcL,EAAOM,GAGzB,EAAK7D,SACL,EAAKC,cACL,EAAKyD,UACL,EAAKE,aAEL,EAAKE,eAlBN,EAAK9D,QAAU,KACf,EAAKC,aAAe,KACpB,EAAKyD,SAAW,KAChB,EAAKE,YAAc,KALF,EADrB,qDA0BI,OACE,8BACE,cAAC,IAAD,CAAKG,OAAQ,GAAb,SACE,eAAC,IAAD,CAAKtB,UAAU,aAAaU,KAAM,GAAlC,UACE,cAAC,IAAD,UACE,eAAC,IAAD,2BAAUF,GAAV,IAAkBe,KAAK,gBAAgBV,SAAUW,KAAKX,SAAtD,UACE,cAAC,IAAKP,KAAN,CAAWiB,KAAK,KAAKhB,MAAM,UAA3B,SACE,cAAC,IAAD,CAAakB,OAAO,IAAIC,OAAO,UAEjC,cAAC,IAAKpB,KAAN,CAAWiB,KAAK,KAAKhB,MAAM,gBAA3B,SACE,cAAC,IAAD,CAAakB,OAAO,IAAIC,OAAO,UAEjC,cAAC,IAAKpB,KAAN,CAAWiB,KAAK,KAAKhB,MAAM,SAA3B,SACE,cAAC,IAAD,CAAakB,OAAO,IAAIC,OAAO,UAEjC,cAAC,IAAKpB,KAAN,CAAWiB,KAAK,KAAKhB,MAAM,eAA3B,SACE,cAAC,IAAD,CAAakB,OAAO,IAAIC,OAAO,UAUjC,cAAC,IAAKpB,KAAN,CAAWK,WAAU,2BAAOH,EAAOG,YAAd,IAA0BgB,OAAQ,IAAvD,SACE,cAAC,IAAD,CAAQjC,KAAK,UAAUkC,SAAS,SAAhC,4BAMN,uBACA,cAAC,IAAD,UAGEJ,KAAKjE,SAAWiE,KAAKhE,cAAgBgE,KAAKP,UAAYO,KAAKL,aAC3D,cAAC,EAAD,CACE5D,QAASiE,KAAKjE,QACdC,aAAcgE,KAAKhE,aACnBC,OAAQ+D,KAAKL,YACbzD,aAAc8D,KAAKP,wBApEnC,GAAyBY,IAAMC,WCXXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31efcfd8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line  } from '@ant-design/charts';\nimport { PageHeader, Tabs, Button, Statistic, Descriptions } from 'antd';\nimport 'antd/dist/antd.css';\n\n\nconst findIntersection = (x1, y1, x2, y2, x3, y3, x4, y4) => {\n  var px = ((x1*y2-y1*x2)*(x3-x4) - (x1-x2)*(x3*y4-y3*x4)) / ((x1-x2)*(y3-y4) - (y1-y2)*(x3-x4))\n  var py = ((x1*y2-y1*x2)*(y3-y4) - (y1-y2)*(x3*y4-y3*x4)) / ((x1-x2)*(y3-y4) - (y1-y2)*(x3-x4))\n\n  // console.log(px, py)\n  return {px, py}\n}\n\nconst round = function(number, precision) {\n    var factor = Math.pow(10, precision);\n    var tempNumber = number * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\nconst DemoDualAxes: React.FC = (props) => {\n\n  const balance = props.balance\n\n  const currentPrice = props.currentPrice //21.18\n  var strike = props.strike //20\n  var costOfOption = props.costOfOption //1.85\n  var equityLine = []\n  var numberOfShares = Math.floor(balance/currentPrice) //236.0\n  var costOfStockPosition = currentPrice * numberOfShares // at \n\n  var optionBreakeven = (strike + costOfOption)\n\n  var numberOfContracts = Math.floor(balance/(costOfOption*100))\n  var costOfOptionPosition = costOfOption * (numberOfContracts * 100)\n  \n  \n\n  let coords = findIntersection(\n    // optionBreakeven, 0.0, maxPrice , (maxPrice-optionBreakeven)*numberOfContracts*100,\n    optionBreakeven, 0.0, 100, ((100-optionBreakeven)*(numberOfContracts*100)), \n    currentPrice, 0.0, 100, (100 * numberOfShares)-costOfStockPosition,\n    // currentPrice, 0.0, 23.5, 547.52\n  )\n\n  \n  const minPrice = (coords.px * 0.9)\n  const maxPrice = (coords.px * 1.1)\n  // const maxPrice = (currentPrice * 1.1)\n\n\n\n  for (var price = (minPrice*100); price <= (maxPrice*100); price++) {\n\n    var usedPrice = price / 100.0\n    var value = usedPrice * numberOfShares\n    value = round(value - costOfStockPosition, 8)\n\n    // console.log(usedPrice, value)\n    // equityLine.push([price, value])\n    equityLine.push({value: value, price: usedPrice.toFixed(2), key: \"series1\"})\n  }\n  // console.log(equityLine)\n\n  var optionLine = []\n\n\n  for (var price = (minPrice*100); price <= (maxPrice*100); price++) {\n\n    var usedPrice = price / 100.0\n    // console.log(costOfOptionPosition)\n\n    var value = (usedPrice-strike) * (numberOfContracts*100) \n\n    if (usedPrice < optionBreakeven) {\n      value = 0\n      // continue //\n    }\n\n    value = round(value - costOfOptionPosition, 8)\n\n    // optionLine.push([price, value])\n    equityLine.push({value: value, price: usedPrice.toFixed(2), key: \"series2\"})\n  }\n\n  var mmax = props.maxx\n  var mmin = props.minx\n\nconsole.log(mmax, mmin)\n  // console.log(\"coords\",coords)\n\n  var config = {\n    data: equityLine,\n    height: 800,\n    xField: 'price',\n    yField: 'value',\n    // yAxis: {\n      // min: mmin,//-200\n      // max: mmax//1000\n    // },\n    // legend: false,\n    seriesField: 'key',\n    // stepType: 'hvh',\n    annotations: [\n      // {\n      //   type: 'regionFilter',\n      //   start: ['min', 'median'],\n      //   end: ['max', '0'],\n      //   color: '#F4664A',\n      // },\n      // {\n      //   type: 'text',\n      //   position: ['min', 'median'],\n      //   content : 'median' , \n      //   offsetY: -4,\n      //   style: { textBaseline: 'bottom' },\n      // },\n      {\n        type: 'line',\n        // start: ['min', 'median'],\n        start: ['min', 0],\n        end: ['max', 0],\n        // end: ['max', 'median'],\n        style: {\n          stroke: '#F4664A',\n          lineDash : [ 2 , 2 ] ,  \n        },\n      },\n      {\n        type: 'line',\n        // start: ['min', 'median'],\n        start: ['min', coords.py],\n        end: ['max', coords.py],\n        // end: ['max', 'median'],\n        style: {\n          stroke: '#FF00FF',\n          lineDash : [ 2 , 2 ] ,  \n        },\n      }\n    ],\n  };\n\n  return <> \n\n    <PageHeader\n      className=\"site-page-header-responsive\"\n      onBack={\n        () => {}\n      }\n      title=\"Title\"\n      subTitle=\"This is a subtitle\"\n    >\n\n    <Descriptions size=\"small\" column={3}>\n    <Descriptions.Item label=\"Current Price\">{currentPrice}</Descriptions.Item>\n    <Descriptions.Item label=\"Strike Price\">{strike}</Descriptions.Item>\n    <Descriptions.Item label=\"Equity Cost\">{costOfStockPosition}</Descriptions.Item>\n    <Descriptions.Item label=\"Option Cost\">{costOfOptionPosition}</Descriptions.Item>\n    <Descriptions.Item label=\"Option Breakeven\">{optionBreakeven}</Descriptions.Item>\n    <Descriptions.Item label=\"Option Price\">{costOfOption}</Descriptions.Item>\n    <Descriptions.Item label=\"Number of Contracts\">{numberOfContracts}</Descriptions.Item>\n    <Descriptions.Item label=\"Number of Shares\">{numberOfShares}</Descriptions.Item>\n    <Descriptions.Item label=\"Share Leverage\">{round((numberOfContracts*100)/numberOfShares,3)}</Descriptions.Item>\n    <Descriptions.Item label=\"Options > Equity Breakeven\">{round(coords.px, 3)}</Descriptions.Item>\n    <Descriptions.Item label=\"Break Value\">{round(coords.py, 3)}</Descriptions.Item>\n    <Descriptions.Item label=\"Percent to profit\">{round((round(coords.px, 3)/currentPrice)-1,3)}</Descriptions.Item>\n  </Descriptions>\n\n    </PageHeader>\n\n\n    <Line {...config} /> \n  </>\n};\nexport default DemoDualAxes;","import React, { useEffect } from \"react\";\nimport DemoDualAxes from \"./Chart.js\";\nimport { Input, Tooltip, Card, Row, Col } from \"antd\";\nimport { InfoCircleOutlined, UserOutlined } from \"@ant-design/icons\";\n\nimport { Form, InputNumber, Button } from \"antd\";\n\nconst layout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 16 },\n};\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not a valid email!\",\n    number: \"${label} is not a valid number!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n};\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.balance = null // 5000;\n    this.currentPrice = null // 21.18;\n    this.optPrice = null // 1.85;\n    this.strikePrice = null // 20;\n  }\n\n  onFinish = (values) => {\n    this.balance = values.bl\n    this.currentPrice = values.cp\n    this.optPrice = values.op\n    this.strikePrice = values.st\n\n    if (\n    \tthis.balance && \n    \tthis.currentPrice && \n    \tthis.optPrice && \n    \tthis.strikePrice\n    ) {\n    \tthis.forceUpdate();\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Row gutter={16}>\n          <Col className=\"gutter-row\" span={24}>\n            <Card>\n              <Form {...layout} name=\"nest-messages\" onFinish={this.onFinish}>\n                <Form.Item name=\"bl\" label=\"Balance\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n                <Form.Item name=\"cp\" label=\"Current Price\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n                <Form.Item name=\"st\" label=\"Strike\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n                <Form.Item name=\"op\" label=\"Option Price\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n{/*\n                <Form.Item name=\"minx\" label=\"Min x\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n                <Form.Item name=\"maxx\" label=\"Max x\">\n                  <InputNumber prefix=\"$\" suffix=\"USD\" />\n                </Form.Item>\n*/}\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Card>\n            <br />\n            <Card>\n\n            {\n              this.balance && this.currentPrice && this.optPrice && this.strikePrice &&\n              <DemoDualAxes\n                balance={this.balance}\n                currentPrice={this.currentPrice}\n                strike={this.strikePrice}\n                costOfOption={this.optPrice}\n              />\n            }\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}